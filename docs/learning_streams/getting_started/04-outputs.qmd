---
title: Output Components
---

<!--
From:
https://github.com/rstudio/shiny-dev-center/blob/a2a53d9f7f896ad790d9870eb764240eb22f6f25/tutorial/lesson4/index.md
-->

Now that we know how to lay our the application and insert input components for the user to interact with,
let's create some output components that **react** to the input components.

We'll build on the application from the previous lesson:

:::{.column-page-inset-right}
```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 700
from shiny.express import ui

ui.page_opts(title="Census Visualization", fillable=True)

with ui.sidebar(bg="#f8f8f8"):
    ui.help_text("Create demographic maps with information from the 2020 US Census.")
    ui.input_select(
        "var",
        "Choose a variable to display",
        [
            "Percent White",
            "Percent Black",
            "Percent Hispanic",
            "Percent Asian",
        ],
        selected="Percent White",
    )

    ui.input_slider("range", "Range of interest:", min=10, max=100, value=[0, 100])

"Main content"

```
:::

Output components all begin with a function with a `ui.render_*` decorator above a function definition.
The decorator is one of the ways that you signal to Shiny that the code will react to some change
in the application.
The name of the function does not matter to shiny, but you should pick a name
that hints at what value is going to be returned.
Finally, the body of the function should return the corresponding object for the output component.
Again, the decorator function signals to Shiny what kind of output component is displayed in the application.

The `@render.text` output is one way you can help debug your application visually.
Similar to `print()` statement debugging, except the print statement will be rendered in your application.
Let's add a `@render.text` output to the body of our sidebar layout.

Here are the steps we will do:

1. Make sure we have a `ui.input_select()` with the display variable choice in the sidepanel of the application.
2. Define a server function where we want the text to be displayed (e.g., the main body of the application)
3. Use the `input.<ID>()` pattern to have shiny reactively get the input component value
4. Return the value you want to use in the application
5. Decorate the function with `@render.text` to signal that we want the returned value rendered as text in the application.

:::{.column-page-inset-right}
```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 700
from shiny import render
from shiny.express import input, ui

ui.page_opts(title="Census Visualization", fillable=True)

with ui.sidebar(bg="#f8f8f8"):
    ui.help_text("Create demographic maps with information from the 2020 US Census.")
    ui.input_select(
        "var",
        "Choose a variable to display",
        [
            "Percent White",
            "Percent Black",
            "Percent Hispanic",
            "Percent Asian",
        ],
        selected="Percent White",
    )

    ui.input_slider("range", "Range of interest:", min=10, max=100, value=[0, 100])

@render.text
def text_output():
    return input.var()

```
:::

You can add a bit more context to your application by adding text along side the `@render.text` value.

:::{.callout-note}
## Exercise

Replace the `@render.text` section of the application code with:

```python
"You have selected the variable:"

@render.text(inline=True)
def text_output():
    return input.var()
```

You can read more about `@render.text` here:
<https://shiny.posit.co/py/api/core/render.text.html>

:::

## Use input values

In the application above, we had this particular line in our function body, `input.var()`.
This line shows one of the main features in Shiny, reactive values.

- The `input` variable automatically holds all the values from the input components as a Python dictionary
- We can access the input component value with dot notation and
  use the same `id` we defined in the `ui.input_*()` function
- The `input.var` represents the actual reactive value object,
  if we want to actually calculate the current reactive value,
  we need to call it as a function with `input.var()`

:::{.callout-note}
## Exercise

Create another reactive text output in the body of the application.
This time use a `@render.code` decorator to output the lower and upper bound
value from our `ui.input_slider()` with the `id="range"`.

:::{.callout-tip}
The `ui.input_slider()` component returns a list of values where the first (0 index)
is the lower slider value, and the second (1 index) is the upper slider value.
:::

<!--
TODO: use relative link to
https://shiny.posit.co/py/api/core/ui.output_text_verbatim.html
-->

:::


::: {.callout-caution collapse="true" .column-page-inset-right}

## Solution

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 700
from shiny import render
from shiny.express import input, ui

ui.page_opts(title="Census Visualization", fillable=True)

with ui.sidebar(bg="#f8f8f8"):
    ui.help_text("Create demographic maps with information from the 2020 US Census.")
    ui.input_select(
        "var",
        "Choose a variable to display",
        [
            "Percent White",
            "Percent Black",
            "Percent Hispanic",
            "Percent Asian",
        ],
        selected="Percent White",
    )

    ui.input_slider("range", "Range of interest:", min=10, max=100, value=[0, 100])

# TODO: replacement for when you just want to render text but not as code elements
@render.text
def text_output():
    return input.var()

# TODO: how to create a verbatim shiny express ui element
# TODO: From winston:
# should be recommending ui.output_code and @render.code over ui.output_text_verbatim and @render.text
@render.code
def text_verbatim_code():
    return f"{input.range()[0]}, {input.range()[1]}"
```
:::
